@Todo: rewrite this whole ass thing.
Needs to be simplified.
    
The point of this is to have an easy medium between bare AssetBundles
and the overcomplicated Addressables. You should have decent control
with just a few clicks.

Users should be able to:
    - Select Assets to include in a bundle
    - Create aliases for those Assets that can be used at runtime
    - Build selected bundles
   

=== API usage mockup ===

Bundle[] bundles = GetBundles(searchString);

foreach(Bundle b in bundles)
{
    if(GUI.Button(b.name))
    {
        openedBundle = b;
    }
}


var selected = AbundableWindow.GetSelectedBundles();

string btnName = selected.Length > 0 ? "Build Selected" : "Build";

if(GUI.Button(btnName)) 
{
    if(selected.Length > 0) 
    {
        BuildBundles(selected);
    }
    else if(openedBundle != null)
    {
        BuildBundle(openedBundle);
    }
}


foreach(BundleEntry entry in openedBundle.entries) 
{
    entry.address = GUI.DelayedTextField(entry.address);
    GUI.LabelField(entry.assetPath);
}


=== API Mockup ===

class AbundableWindow
{
    Bundle[] GetSelectedBundles();
}

class AbundableData
{
    Bundle[] GetBundles(searchString);
    void BuildBundle(Bundle bundle);
    void BuildBundles(Bundle[] bundles);
}

class Bundle
{
    string name;
    BundleEntry[] entries;
}

class BundleEntry
{
    string assetPath;
    string address;
}